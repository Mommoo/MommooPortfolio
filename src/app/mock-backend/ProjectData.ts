export const ProjectDatas : Array<object> = [
  {
    title : 'FlatSwing',
    imagePath : '/assets/images/flat.png',
    summary : '해당 프로젝트는 자바 시스템 UI인 Swing을 보강하기 위한 라이브러리를 제작하였다.\n' +
      '자바 Swing의 단점 중 하나인 UI디자인을 플랫 디자인으로 제작하였으며, 스윙이 제공하기 어려운 API 부분을 스윙 로우 단계까지 분석하여 필요한 API를 직접 구현하였다. 공개 라이브러리를 생각한 공개 API의 디자인을 생각하여, 클래스와 메서드를 설계 제작했다.',
    description : '- 공개API를 제작,배포 유지보수 하기 위한 캡슐화\n' +
      '- 지속적인 리팩토링으로 코드 품질 개선을 높이며, 디자인패턴, 객체지향등을 적용하여 공부\n' +
      '- AWT Painting API를 써가며 프론트앤드 기술에 필수적인 Canvas Paint 이론을 공부',
    devSkills : ['Swing', 'AWT Painting', 'Canvas Animation'],
    devLevel : 2
  },
  {
    title : '온라인 학습',
    imagePath : '',
    summary : '서울과학기술대학교 링크사업단과 같이 추진한 프로젝트이다. 첫번째 외주 프로젝트이다. 해당 프로젝트는 교육시설에서 학생들의 시험을 치루고 채점하고 결과를 알려주는 일련의 시스템을 웹 시스템으로 제작 하는 것이다. 웹 시스템을 통해, 교사는 시험문제를 만들 수 있으며 제작된 시험문제는 서버에 보관되며, 스마트 기기를 통해 해당 문제를 받을 수 있다. 시스템에 접속한 스마트 기기는 ID가 부여되어, 교사의 웹 시스템 화면에 테이블로 표시되며, 실시간으로 테이블이 새로 고침된다. 해당 테이블을 통해, 학생의 스마트기기와 컨텐츠를 컨트롤 할 수 있다. 예를들어, 전체 학생에게 특정 번호의 문제의 화면만 표시하게 할 수 있으며, 특정 학생의 스마트 기기의 전원을 원격으로 전원을 끌 수도 있다.',
    description : 'ASP.Net 프레임워크를 이용하여 프로젝트를 진행하였다. C#과 ASP.Net에서 만든 프론트 엔드 컴포넌트를 사용하였다. ASP.Net의 기본구조는 하나의 페이지에 3개의 파일이 존재한다. ( 프론트 담당 파일, 프론트 파일에 적용할 디자인 담당 파일, 프론트를 랜더링할때 필요한 데이터를 처리하는 서버 담당 파일 ) 이러한 구조를 통해, 프로젝트를 진행하였으며, 자체적인 ASP.Net 구조를 많이 사용하였다. 폴링 구조를 통해, 클라이언트로 들어오는 데이터를 처리하여 페이지를 랜더링 하였으며 아쉬운점은 통상적인 웹 프로젝트 개발을 해보지 않고, 자체적인 프레임워크 방식으로 웹 개발을 진행하여 이해도가 많이 떨어졌다는 점이다.',
    devSkills : ['Polling', 'ASP.Net Core', 'ASP.Net Component', 'IIS Tuning'],
    devLevel : 1
  },
  {
    title : '과기DAY',
    imagePath : '/assets/images/portfolio/kakiday.png',
    devSkills : ['Http 통신', 'Html Table 파싱', 'JSON 파싱', '공공 정보 REST API 연동', 'Android Canvas Animation', 'Android Custom View', 'Android Permission', 'ContentProvider 연동', '비동기 프로그래밍(AsyncTask)', '멀티스레드 프로그래밍', 'MVP 아키텍쳐'],
    summary : '해당 프로젝트는 모교인 서울과학기술대학교의 정보를 앱으로 제공하는 서비스를 만들기 위해 진행하였다. 대학교가 제공하는 API가 없어서, 와이어샤크를 통해, 대학교 시스템이 작동하는 원리를 분석하였고, 그것을 토데로 기능들을 만들어 서비스를 제공하였다. 또한 학교 근처의 교통정보를 제공하기 위해 공공API인 버스, 지하철 REST API를 연동하였다. 또한 대학교 웹 정보를 파싱하여 재구성 한 후, 식단표, 연락처 정보서비스를 제공하였다.\n' +
      '깔끔한 디자인을 위해 구글 머터리얼 디자인을 준수했으며, 캔버스 애니메이션을 통해 머터리얼 자체 애니메이션을 직접 제작했다. 또한 캘린더 앱을 자체적으로 만들어 과기DAY앱에 통합하였다. ContentProvider를 통해, 자신의 일정이 그대로 연동되고, 더불어 학교 정보까지 캘린더에 표시하여 차별성을 두었다. 성능을 생각하여 멀티스레딩으로 병렬 일처리를 구성하였다.',
    description : '서비스를 제공하기 위해 학교 시스템을 분석할 필요가 있었다. 와이어샤크로 분석할 수 있다는걸 알게 되었고, 그것을 위해 전반적인 네트워크 통신을 공부하였다. ( 프로젝트 잠시 중단 후 1달~2달간 네트워크 공부 ) 공공 포털 서비스에 등록하여, 권한 승낙을 얻은 후 REST API를 통해 학교 근처 버스, 지하철 정보를 실시간으로 제공하였다. 안드로이드 하위 호환 때문에 머터리얼 디자인 라이브러리를 쓰지 않고, 커스텀 뷰로 전부 제작하였으며 (Material Calendar 참고) 머터리얼 디자인의 애니메이션을 구현하기 위해, 프론트앤드 기술인 캔버스 애니메이션, 오브젝트 애니메이션 등을 공부하여 습득 적용 하였다. 캘린더 기능은 다른 캘린더 앱의 성능과 비교해도 문제 없을 정도로 해당 서비스에 많은 노력을 하였다. 안드로이드가 제공하는 뷰를 사용하는 것이 아닌 캔버스에 직접 그림으로써, 성능향상을 추구하였으며, 멀티스레딩을 통해 빠른 동작과 수려한 애니메이션을 구현하였다. ContentProvider 연동을 통해, 안드로이드 캘린더 앱 규격을 맞추었다. \n' +
      '마지막으로 안드로이드 마시멜로우부터 요구하는 사용자 권한 체크 역시 따로 라이브러리(MommooPermission 참고)를 직접 제작하여 적용하였다.\n' +
      '제작하고 6개월 후에, MVP 아키텍쳐를 공부하여 해당앱에 적용 해보았다.',
    devLevel : 2
  },
  {
    title: 'Material Calendar',
    imagePath: '',
    devSkills: ['Android Canvas Animation', 'Android Canvas View', 'Android Custom View', 'MultiThreading Programming'],
    summary: '해당 프로젝트는 머터리얼 디자인이 적용되는 롤리팝 OS 버전보다 낮은 하위 OS 버전에도 적용하기 위해 만든 머터리얼 디자인 캘린더이다. 해당 프로젝트의 특징은 기존 머터리얼 디자인이 제공하는 TimePicker, CalendarPicker, MonthPicker 의 디자인을 전부 준수하여 직접 제작하였으며, 추가적으로 AlarmPicker 까지 머터리얼 디자인으로 제작하였다. 기존의 제공하는 Picker 시리즈와는 차별적으로 손 스크롤로 선택하는 추가 모드를 만들어 전부 적용하였다. 이러한 차별점이 맘에 들었는지 외국인 개발자 몇몇 분이 감사하게도 써주신다.',
    description: '주로 안드로이드 프론트 엔드 기술공부가 많았다. 제공하는 안드로이드 기본 View가 없다보니, 캔버스로 직접 그린 위젯이 많았으며, 수려한 애니메이션을 위해 Object Animation으로 캔버스 애니메이션을 구현하였다. 또한 멀티 스레딩 프로그래밍으로 성능을 높였으며, Picker끼리 비슷한 역할들이 많아 객체지향적으로 설계연습을 많이 할 수 있었다. ',
    devLevel: 1
  }
];
